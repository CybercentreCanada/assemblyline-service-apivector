name: APIVector
version: $SERVICE_TAG
description: This service extracts library imports from windows PE files or memory dump to generate api vector classification.

# Regex defining the types of files the service accepts and rejects
accepts: executable/windows
rejects: empty|metadata/.*

# At which stage the service should run (one of FILTER, EXTRACT, CORE, SECONDARY, POST, REVIEW)
# NOTE: Stages are executed in the order defined in the list
stage: CORE
# Which category the service is part of (one of Antivirus, Dynamic Analysis, External, Extraction, Filtering, Internet Connected, Networking, Static Analysis)
category: Static Analysis

# Does the service require access to the file to perform its task
# If set to false, the service will only have access to the file metadata (e.g. Hashes, size, type, ...)
file_required: true
# Maximum execution time the service has before it's considered to be timed out
timeout: 60

# is the service enabled by default
enabled: true
privileged: true

config:
  min_confidence: 50
  min_jaccard_info: 40
  min_jaccard_tag: 80

docker_config:
  image: ${REGISTRY}cccs/assemblyline-service-apivector:$SERVICE_TAG
  cpu_cores: 1
  ram_mb: 512

dependencies:
  updates:
    container:
      allow_internet_access: true
      command: ["python", "-m", "apivector.updater"]
      image: ${REGISTRY}cccs/assemblyline-service-apivector:$SERVICE_TAG
      ports: ["5003"]
      environment:
        - name: MAX_REQUESTS
          value: 0
    run_as_core: True

update_config:
  generates_signatures: false
  sources:
    - name: malpedia
      headers:
        - name: Authorization
          value: "apitoken <REPLACE_ME>"
      uri: https://malpedia.caad.fkie.fraunhofer.de/api/list/apiscout/csv
      pattern: .*csv
  update_interval_seconds: 86400
  wait_for_update: false
  default_pattern: .*\\.csv
